import subprocess
import sys

# Ensure all required packages are installed
required_packages = ['paramiko', 'psutil', 'libvirt-python', 'scapy']

def install_package(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

for package in required_packages:
    try:
        __import__(package)
    except ImportError:
        install_package(package)

import hashlib
import os
import re
import psutil
import json
import time
import libvirt
import paramiko
from scapy.all import sniff, wrpcap

# Utility functions
def get_file_type(file_path):
    return subprocess.getoutput(f'file {file_path}')

def calculate_hashes(file_path):
    hashes = {}
    with open(file_path, 'rb') as f:
        file_data = f.read()
        hashes['md5'] = hashlib.md5(file_data).hexdigest()
        hashes['sha1'] = hashlib.sha1(file_data).hexdigest()
        hashes['sha256'] = hashlib.sha256(file_data).hexdigest()
    return hashes

def extract_strings(file_path, min_length=4):
    strings = subprocess.getoutput(f"strings -n {min_length} {file_path}")
    return strings.split('\n')

def check_signatures(file_path, signatures):
    file_data = open(file_path, 'rb').read()
    for sig in signatures:
        if re.search(sig.encode(), file_data):
            return True
    return False

def monitor_network_traffic(duration, output_file):
    packets = sniff(timeout=duration)
    wrpcap(output_file, packets)

def monitor_file_system_changes(duration):
    start_snapshot = {p.info['pid']: p.info for p in psutil.process_iter(['pid', 'name', 'username', 'create_time', 'status', 'exe', 'cmdline'])}
    time.sleep(duration)
    end_snapshot = {p.info['pid']: p.info for p in psutil.process_iter(['pid', 'name', 'username', 'create_time', 'status', 'exe', 'cmdline'])}
    
    new_processes = [p for p in end_snapshot if p not in start_snapshot]
    terminated_processes = [p for p in start_snapshot if p not in end_snapshot]
    
    return new_processes, terminated_processes

def start_vm(vm_name):
    conn = libvirt.open('qemu:///system')
    vm = conn.lookupByName(vm_name)
    if vm.isActive() == 0:
        vm.create()
    return conn, vm

def stop_vm(vm):
    if vm.isActive() == 1:
        vm.destroy()

def transfer_file_to_vm(vm_ip, username, password, local_path, remote_path):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(vm_ip, username=username, password=password)
    sftp = ssh.open_sftp()
    sftp.put(local_path, remote_path)
    sftp.close()
    ssh.close()

def execute_malware_in_vm(vm_ip, username, password, remote_path):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(vm_ip, username=username, password=password)
    stdin, stdout, stderr = ssh.exec_command(f"chmod +x {remote_path} && {remote_path}")
    ssh.close()

def retrieve_results_from_vm(vm_ip, username, password, remote_path, local_path):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(vm_ip, username=username, password=password)
    sftp = ssh.open_sftp()
    sftp.get(remote_path, local_path)
    sftp.close()
    ssh.close()

def monitor_system_resources(duration):
    start_cpu_times = psutil.cpu_times_percent(interval=None)
    start_disk_io = psutil.disk_io_counters()
    start_net_io = psutil.net_io_counters()
    
    time.sleep(duration)
    
    end_cpu_times = psutil.cpu_times_percent(interval=None)
    end_disk_io = psutil.disk_io_counters()
    end_net_io = psutil.net_io_counters()
    
    cpu_usage = { 
        'user': end_cpu_times.user - start_cpu_times.user, 
        'system': end_cpu_times.system - start_cpu_times.system,
        'idle': end_cpu_times.idle - start_cpu_times.idle
    }
    disk_io = {
        'read_count': end_disk_io.read_count - start_disk_io.read_count,
        'write_count': end_disk_io.write_count - start_disk_io.write_count,
        'read_bytes': end_disk_io.read_bytes - start_disk_io.read_bytes,
        'write_bytes': end_disk_io.write_bytes - start_disk_io.write_bytes
    }
    net_io = {
        'bytes_sent': end_net_io.bytes_sent - start_net_io.bytes_sent,
        'bytes_recv': end_net_io.bytes_recv - start_net_io.bytes_recv
    }
    
    return cpu_usage, disk_io, net_io

# Main analysis function
def main(file_path, vm_name, vm_ip, username, password, analysis_duration=60):
    results = {}

    try:
        print(f"Analyzing file: {file_path}")
        
        # Get file type
        file_type = get_file_type(file_path)
        print(f"File type: {file_type}")
        results['file_type'] = file_type
        
        # Calculate hashes
        hashes = calculate_hashes(file_path)
        print("Hashes:")
        for hash_type, hash_value in hashes.items():
            print(f"  {hash_type}: {hash_value}")
        results['hashes'] = hashes
        
        # Extract strings
        strings = extract_strings(file_path)
        print("Extracted strings:")
        results['strings'] = strings
        
        # Check for known signatures (example: simple list of signatures)
        signatures = ["malware_signature1", "malware_signature2"]
        signature_found = check_signatures(file_path, signatures)
        results['signature_found'] = signature_found
        if signature_found:
            print("Known malware signature found!")
        else:
            print("No known malware signatures found.")
        
        # Dynamic Analysis
        print("Starting dynamic analysis...")
        
        # Start VM
        conn, vm = start_vm(vm_name)
        
        # Transfer malware sample to VM
        remote_malware_path = "/tmp/malware_sample"
        transfer_file_to_vm(vm_ip, username, password, file_path, remote_malware_path)
        
        # Monitor system resources before execution
        cpu_usage_before, disk_io_before, net_io_before = monitor_system_resources(0)
        
        # Execute malware in VM
        execute_malware_in_vm(vm_ip, username, password, remote_malware_path)
        
        # Monitor network traffic
        network_output_file = "network_traffic.pcap"
        monitor_network_traffic(analysis_duration, network_output_file)
        print(f"Network traffic captured in {network_output_file}")
        results['network_traffic_file'] = network_output_file
        
        # File system and process monitoring
        new_processes, terminated_processes = monitor_file_system_changes(analysis_duration)
        results['new_processes'] = new_processes
        results['terminated_processes'] = terminated_processes
        
        # Monitor system resources after execution
        cpu_usage_after, disk_io_after, net_io_after = monitor_system_resources(0)
        
        results['cpu_usage'] = {
            'before': cpu_usage_before,
            'after': cpu_usage_after
        }
        results['disk_io'] = {
            'before': disk_io_before,
            'after': disk_io_after
        }
        results['net_io'] = {
            'before': net_io_before,
            'after': net_io_after
        }
        
        print("Dynamic analysis completed.")
        print("New processes created:")
        for proc in new_processes:
            print(f"  {proc}")
        
        print("Processes terminated:")
        for proc in terminated_processes:
            print(f"  {proc}")
        
        # Retrieve results from VM
        remote_results_path = "/tmp/analysis_results.json"
        local_results_path = "vm_analysis_results.json"
        retrieve_results_from_vm(vm_ip, username, password, remote_results_path, local_results_path)
        
        # Stop VM
        stop_vm(vm)
        
        # Save results to a file
        with open('analysis_results.json', 'w') as f:
            json.dump(results, f, indent=4)
        print("Analysis results saved to analysis_results.json")

    except Exception as e:
        print(f"Error during analysis: {e}")
        if 'vm' in locals():
            stop_vm(vm)

if __name__ == "__main__":
    file_path = "path_to_malware_sample"
    vm_name = "analysis_vm"
    vm_ip = "192.168.122.101"
    username = "vm_user"
    password = "vm_password"
    main(file_path, vm_name, vm_ip, username, password)
